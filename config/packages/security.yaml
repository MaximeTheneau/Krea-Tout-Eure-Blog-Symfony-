security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email 
        # used to reload user from session & other features (e.g. switch_user)
        api_token_provider:
            entity:
                class: App\Security\UserProvider
                property: username
    firewalls: 

        api:
            provider: api_token_provider
            pattern:  ^/api
            stateless: true
            entry_point: App\Security\ApiAuthenticator
            
        main:
            lazy: true
            provider: app_user_provider
                # where to redirect after logout
                # target: app_any_route
            logout:
                path: app_logout

            form_login:
                # "app_login" is the name of the route created previously
                login_path: app_login
                check_path: app_login
                enable_csrf: true 

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/contact, roles: IS_AUTHENTICATED_FULLY}

        - { path: ^/posts/*, roles: ROLE_USER }
        - { path: ^/posts/*, roles: ROLE_USER }

        - { path: ^/pages/*, roles: ROLE_MANAGER }
        - { path: ^/pages/*, roles: ROLE_MANAGER }

        - { path: ^/back/(.*)/(new|edit), roles: [ROLE_ADMIN] }
        - { path: ^/api/pages, roles: [ROLE_USER]}


    role_hierarchy:
        # ADMIN ait les mêmes droits que MANAGER        
        ROLE_ADMIN : ROLE_MANAGER
        # MANAGER ait les mêmes droits que USER
        ROLE_MANAGER : ROLE_USER
        
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
